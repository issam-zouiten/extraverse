{"version":3,"sources":["../../lib/verifyAndLint.ts"],"names":["verifyAndLint","baseDir","pagesDir","pagePath","options","pathNotExists","Boolean","results","hasErrors","hasMessages","eslintrcFile","cwd","pagesDirRules","pkgJsonPath","eslintConfig","pluginIsEnabled","useEslintrc","baseConfig","console","log","info","extends","parser","require","resolve","parserOptions","requireConfigFile","sourceType","babelOptions","presets","eslint","ESLint","configFile","completeConfig","calculateConfigForFile","plugins","includes","updatedPagesDir","rule","rules","replace","warn","lintFiles","errors","getErrorResults","length"],"mappings":"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","sourcesContent":["import { ESLint } from 'eslint'\nimport { join } from 'path'\n\nimport { formatResults } from './eslint/customFormatter'\nimport { fileExists } from './file-exists'\nimport * as log from '../build/output/log'\n\nimport findUp from 'next/dist/compiled/find-up'\n\ntype Config = {\n  plugins: string[]\n  rules: { [key: string]: Array<number | string> }\n}\n\nexport async function verifyAndLint(\n  baseDir: string,\n  pagesDir: string,\n  pagePath: string | null\n): Promise<{\n  results: string\n  hasErrors: boolean\n  hasMessages: boolean\n}> {\n  let options: ESLint.Options\n\n  let pathNotExists = Boolean(\n    pagePath && !(await fileExists(join(pagesDir, pagePath)))\n  )\n\n  if (pathNotExists)\n    return { results: '', hasErrors: false, hasMessages: false }\n\n  const eslintrcFile = await findUp(\n    [\n      '.eslintrc.js',\n      '.eslintrc.yaml',\n      '.eslintrc.yml',\n      '.eslintrc.json',\n      '.eslintrc',\n    ],\n    {\n      cwd: baseDir,\n    }\n  )\n\n  const pagesDirRules = ['@next/next/no-html-link-for-pages']\n  const pkgJsonPath = await findUp('package.json', { cwd: baseDir })\n  const { eslintConfig = null } = !!pkgJsonPath\n    ? await import(pkgJsonPath!)\n    : {}\n  let pluginIsEnabled = false\n\n  if (eslintrcFile) {\n    options = {\n      useEslintrc: true,\n      baseConfig: {},\n    }\n  } else {\n    if (!eslintConfig) {\n      console.log()\n      log.info(\n        'No ESLint configuration was detected, but checks from the Next.js ESLint plugin were included automatically (see https://nextjs.org/docs/basic-features/eslint).'\n      )\n      pluginIsEnabled = true\n    }\n\n    options = {\n      baseConfig: eslintConfig ?? {\n        extends: ['plugin:@next/next/recommended'],\n        parser: require.resolve('@babel/eslint-parser'),\n        parserOptions: {\n          requireConfigFile: false,\n          sourceType: 'module',\n          babelOptions: {\n            presets: ['next/babel'],\n          },\n        },\n      },\n      useEslintrc: false,\n    }\n  }\n\n  let eslint = new ESLint(options)\n\n  // check both eslintrc and package.json config since\n  // eslint will load config from both\n  for (const configFile of [eslintrcFile, pkgJsonPath]) {\n    if (!configFile) continue\n\n    const completeConfig: Config = await eslint.calculateConfigForFile(\n      configFile\n    )\n\n    if (completeConfig.plugins?.includes('@next/next')) {\n      pluginIsEnabled = true\n      break\n    }\n  }\n\n  if (pluginIsEnabled) {\n    let updatedPagesDir = false\n\n    for (const rule of pagesDirRules) {\n      if (\n        !options.baseConfig!.rules?.[rule] &&\n        !options.baseConfig!.rules?.[\n          rule.replace('@next/next', '@next/babel-plugin-next')\n        ]\n      ) {\n        if (!options.baseConfig!.rules) {\n          options.baseConfig!.rules = {}\n        }\n        options.baseConfig!.rules[rule] = [1, pagesDir]\n        updatedPagesDir = true\n      }\n    }\n\n    if (updatedPagesDir) {\n      eslint = new ESLint(options)\n    }\n  } else {\n    console.log()\n    log.warn(\n      `The Next.js ESLint plugin was not detected in ${\n        eslintrcFile || pkgJsonPath\n      }. We recommend including it to prevent significant issues in your application (see https://nextjs.org/docs/basic-features/eslint).`\n    )\n  }\n\n  const results = await eslint.lintFiles([\n    pagePath ? join(pagesDir, pagePath) : `${pagesDir}/**/*.{js,tsx}`,\n  ])\n\n  const errors = ESLint.getErrorResults(results)\n\n  return {\n    results: formatResults(baseDir, results),\n    hasErrors: errors?.length > 0 && !pagePath,\n    hasMessages: results?.length > 0,\n  }\n}\n"]}